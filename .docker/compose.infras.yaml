networks:
  ecomma:
    name: ecomma-dev
    driver: bridge
    ipam:
      config:
        - subnet: 10.10.0.0/16
          gateway: 10.10.1.1

services:
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - 443:443
      - 80:80
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../.certs:/certs:ro
      - ../docs:/docs:ro
    networks:
      ecomma:
        ipv4_address: 10.10.10.1
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "-q",
          "--spider",
          "--no-check-certificate",
          "https://127.0.0.1",
        ]
      interval: 5s
      timeout: 8s
      retries: 10
      start_period: 10s

  maildev:
    image: maildev/maildev
    container_name: maildev
    restart: always
    ports:
      - "1025:1025" # SMTP Server
    networks:
      ecomma:
        ipv4_address: 10.10.10.2
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:1080"]
      interval: 5s
      timeout: 8s
      retries: 10
      start_period: 10s

  minio:
    image: minio/minio
    container_name: minio
    restart: always
    ports:
      - "9000:9000" # API S3
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9091"
    networks:
      ecomma:
        ipv4_address: 10.10.10.3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 8s
      retries: 10
      start_period: 10s

  minio-mc:
    image: minio/mc
    container_name: minio-mc
    restart: always
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set minio http://minio:9000 minioadmin minioadmin;
      mc ls minio/assets || mc mb minio/assets;
      mc anonymous set public minio/assets;
      mc ls minio/private || mc mb minio/private;
      mc anonymous set none minio/private;
      echo 'Bucket created!';
      sleep infinity;
      "

  nats:
    image: nats:2.11-alpine
    container_name: nats
    restart: always
    ports:
      - "4222:4222"
    networks:
      ecomma:
        ipv4_address: 10.10.10.4
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "-q",
          "--spider",
          "--no-check-certificate",
          "http://127.0.0.1:8222/healthz",
        ]
      interval: 5s
      timeout: 8s
      retries: 10
      start_period: 10s

  mongodb:
    image: mongo:4
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: user
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: database
    networks:
      ecomma:
        ipv4_address: 10.10.10.5
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.runCommand('ping').ok"]
      interval: 5s
      timeout: 8s
      retries: 10
      start_period: 10s

  mongo-express:
    image: mongo-express:1.0.2
    container_name: mongo-express
    restart: always
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://user:password@mongodb:27017
      ME_CONFIG_MONGODB_ENABLE_ADMIN: true
      ME_CONFIG_BASICAUTH: false
      ME_CONFIG_BASICAUTH_ENABLED: false
      VCAP_APP_HOST: 0.0.0.0
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      ecomma:
        ipv4_address: 10.10.10.6

  dozzle:
    container_name: dozzle
    image: amir20/dozzle:v8.12.7
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      ecomma:
        ipv4_address: 10.10.10.7

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      ecomma:
        ipv4_address: 10.10.10.8
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 5s
      timeout: 8s
      retries: 10
      start_period: 10s

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      ecomma:
        ipv4_address: 10.10.10.9
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    restart: always
    environment:
      REDIS_HOSTS: local:redis:6379
    depends_on:
      redis:
        condition: service_healthy
    networks:
      ecomma:
        ipv4_address: 10.10.10.10
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://127.0.0.1:8081"]
      interval: 5s
      timeout: 8s
      retries: 10
      start_period: 10s
