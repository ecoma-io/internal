worker_processes auto;

events {
  worker_connections 10240;
  use epoll;
}

http {
  include /etc/nginx/mime.types;

  log_format custom '$remote_addr - $host - $request - $request_time sec - $upstream_addr - $upstream_response_time sec';
  access_log /dev/stdout custom;

  server {
    listen 443 ssl;
    server_name docs.fbi.com;

    ssl_certificate /certs/wildcard.crt;
    ssl_certificate_key /certs/wildcard.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    root /docs;
    index index.html;

    location / {
      # Allow caching, but force revalidation with origin on every request
      add_header Cache-Control "public, must-revalidate" always;
      add_header Pragma ""; # Remove the no-cache legacy header
      add_header Expires ""; # Leave Expires unset to rely on Cache-Control

      try_files $uri $uri/ =404;
    }
  }

  server {
      listen 80;
      server_name fbi.com *.fbi.com;
      return 301 https://$host$request_uri;
  }

  map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
  }

  map $host $backend {
      mail.fbi.com 10.10.10.3:1080;
      minio.fbi.com 10.10.10.3:9001;
      s3.fbi.com 10.10.10.3:9000;
      mongo-express.fbi.com 10.10.10.6:8081;
      dozzle.fbi.com 10.10.10.7:8080;
      rabbitmq-admin.fbi.com 10.10.10.8:15672;
      redis-commander.fbi.com 10.10.10.10:8081;
      accounts.fbi.com 10.10.30.3:443;
      app.fbi.com 10.10.30.2:443;
      fbi.com 10.10.20.1:443;
      default "";
  }

  server {
    listen 443 ssl;
    server_name fbi.com *.fbi.com;

    ssl_certificate /certs/wildcard.crt;
    ssl_certificate_key /certs/wildcard.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;


    location ^~ /browser-sync/socket.io/ {
      if ($backend = "") {
        return 404;
      }

      proxy_pass http://$backend;

      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
      proxy_set_header Host $host;

      proxy_http_version 1.1;
      proxy_cache_bypass $http_upgrade;
    }

    location / {

      if ($backend = "") {
        return 404;
      }

      proxy_pass http://$backend;

      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto http;

      proxy_buffering on;
      proxy_buffers 16 16k;
      proxy_buffer_size 32k;
      proxy_busy_buffers_size 64k;

    }


  }


}
